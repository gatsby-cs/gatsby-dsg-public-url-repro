diff --git a/node_modules/gatsby-cli/.babelrc b/node_modules/gatsby-cli/.babelrc
new file mode 100644
index 0000000..4de75c3
--- /dev/null
+++ b/node_modules/gatsby-cli/.babelrc
@@ -0,0 +1,7 @@
+{
+  "presets": [
+    [
+      "babel-preset-gatsby-package"
+    ]
+  ]
+}
diff --git a/node_modules/gatsby-cli/lib/reporter/errors.d.ts b/node_modules/gatsby-cli/lib/reporter/errors.d.ts
index 1406dc9..de06f85 100644
--- a/node_modules/gatsby-cli/lib/reporter/errors.d.ts
+++ b/node_modules/gatsby-cli/lib/reporter/errors.d.ts
@@ -4,8 +4,18 @@ import { ErrorWithCodeFrame } from "./prepare-stack-trace";
 import { IStructuredStackFrame } from "../structured-errors/types";
 export declare const sanitizeStructuredStackTrace: (stack: Array<stackTrace.StackFrame>) => Array<IStructuredStackFrame>;
 export declare function getErrorFormatter(): PrettyError;
+export declare type ErrorWithPotentialForcedLocation = Error & {
+    forcedLocation?: {
+        fileName: string;
+        lineNumber?: number;
+        columnNumber?: number;
+        endLineNumber?: number;
+        endColumnNumber?: number;
+        functionName?: string;
+    };
+};
 /**
  * Convert a stringified webpack compilation error back into
  * an Error instance so it can be formatted properly
  */
-export declare function createErrorFromString(errorStr: string | undefined, sourceMapFile: string): ErrorWithCodeFrame;
+export declare function createErrorFromString(errorOrErrorStack: string | ErrorWithPotentialForcedLocation | undefined, sourceMapFile: string): ErrorWithCodeFrame;
diff --git a/node_modules/gatsby-cli/lib/structured-errors/construct-error.js b/node_modules/gatsby-cli/lib/structured-errors/construct-error.js
index 837393e..4c72532 100644
--- a/node_modules/gatsby-cli/lib/structured-errors/construct-error.js
+++ b/node_modules/gatsby-cli/lib/structured-errors/construct-error.js
@@ -52,8 +52,10 @@ const constructError = ({
   } = _errorSchema.errorSchema.validate(structuredError);
 
   if (error) {
-    console.log(`Failed to validate error`, error);
-    process.exit(1);
+    console.trace(`validation error stack trace`);
+    console.log(`Failed to validate error`, error, structuredError); // @ts-ignore
+
+    return null;
   }
 
   return structuredError;
diff --git a/node_modules/gatsby-cli/rollup.config.js b/node_modules/gatsby-cli/rollup.config.js
new file mode 100644
index 0000000..21981b8
--- /dev/null
+++ b/node_modules/gatsby-cli/rollup.config.js
@@ -0,0 +1,90 @@
+import resolve from "@rollup/plugin-node-resolve"
+import babel from "@rollup/plugin-babel"
+import commonjs from "@rollup/plugin-commonjs"
+import json from "@rollup/plugin-json"
+import replace from "@rollup/plugin-replace";
+import autoExternal from "rollup-plugin-auto-external"
+import internal from "rollup-plugin-internal"
+
+import path from "path"
+
+// Rollup hoists Ink's dynamic require of react-devtools-core which causes
+// a window not found error so we exclude Ink's devtools file for now.
+function excludeDevTools() {
+  const re = /ink/
+  return {
+    name: `ignoreDevTools`,
+
+    load(id) {
+      if (id.match(re)) {
+        if (path.parse(id).name === `devtools`) {
+          return { code: `` }
+        }
+      }
+    },
+  }
+}
+
+const extensions = [`.mjs`, `.js`, `.json`, `.node`, `.ts`, `.tsx`]
+
+export default {
+  input: `src/reporter/loggers/ink/index.tsx`,
+  output: {
+    file: `lib/reporter/loggers/ink/index.js`,
+    format: `cjs`,
+  },
+  cache: false,
+  plugins: [
+    replace({
+      values: {
+        "process.env.NODE_ENV": JSON.stringify(`production`)
+      }
+    }),
+    excludeDevTools(),
+    json(),
+    babel({
+      extensions,
+      babelHelpers: `bundled`,
+      skipPreflightCheck: true,
+      exclude: `node_modules/**`,
+      babelrc: false,
+      presets: [
+        [
+          "@babel/env",
+          {
+            "modules": false,
+            "shippedProposals": true,
+            "targets": { "node": "18.0.0" }
+          }
+        ],
+        "@babel/preset-react"
+      ],
+      plugins: ["@babel/plugin-transform-runtime", "babel-plugin-lodash"],
+      overrides: [
+        {
+          "test": ["**/*.ts", "**/*.tsx"],
+          "plugins": [["@babel/plugin-transform-typescript", { "isTSX": true }]]
+        }
+      ]
+    }),
+    resolve({
+      extensions,
+      dedupe: [ `react`, `ink` ]
+    }),
+    commonjs(),
+    autoExternal(),
+    internal([
+      `react`,
+      `ink`,
+      `ink-spinner`
+    ]),
+  ],
+  external: [
+    `yoga-layout-prebuilt`,
+    // Next one deserve explanation: ... it's because ink logger imports
+    // getStore, onLogAction from higher up (../../redux). But we don't want
+    // two copies of it - one bundled and one not, because it would result
+    // in multiple store copies
+    `../../redux`
+  ]
+}
diff --git a/node_modules/gatsby-cli/tsconfig.json b/node_modules/gatsby-cli/tsconfig.json
new file mode 100644
index 0000000..905cc7a
--- /dev/null
+++ b/node_modules/gatsby-cli/tsconfig.json
@@ -0,0 +1,8 @@
+{
+  "extends": "../../tsconfig.json",
+  "include": ["src"],
+  "compilerOptions": {
+    "skipLibCheck": true
+  },
+  "exclude": ["**/__tests__/**/*", "./src/index.ts"]
+}
